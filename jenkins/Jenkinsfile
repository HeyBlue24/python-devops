pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'docker.io'         // Docker Hub registry URL
        IMAGE_NAME = 'my-python-app'          // Image name in Docker Hub
        TAG_NAME = 'latest'                   // Default tag name (you can customize it)
        DOCKERHUB_USERNAME = 'uthaya1997'     // Docker Hub username
        DOCKERHUB_TOKEN = credentials('dockerhub-token')  // Reference to the Docker token stored in Jenkins
     
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the public GitHub repository to Jenkins workspace
                git url: 'https://github.com/HeyBlue24/python-devops.git', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image from the Dockerfile in the 'docker' folder
                    sh 'docker build -t ${DOCKER_REGISTRY}/${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${TAG_NAME} -f docker/Dockerfile .'
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub using the stored token
                    sh "echo ${DOCKERHUB_TOKEN} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin"
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Push the built image to Docker Hub
                    sh 'docker push ${DOCKER_REGISTRY}/${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${TAG_NAME}'
                }
            }
        }

        stage('Initialize Terraform') {
            steps {
                script {
                    // Initialize Terraform (downloads provider plugins, etc.)
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                script {
                    // Run terraform plan to see the proposed changes
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    // Apply the Terraform plan to create/update resources
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }

        stage('Terraform Output') {
            steps {
                script {
                    // Display output from Terraform
                    sh 'terraform output'
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }

        failure {
            echo "Pipeline failed. Check logs for more details."
        }
    }
}
